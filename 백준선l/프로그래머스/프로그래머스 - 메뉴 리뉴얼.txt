프로그래머스 - 메뉴 리뉴얼


# combinations(객체, r) : 객체(리스트, 문자열)안에서 r개를 선택해 가능한 조합을 튜플로 반환한다.
# 사용 방법 : 無선언 = list(combinations(객체, r))
from itertools import combinations

# Counter(리스트) : 각각의 원소의 갯수를 dic 형태로 출력
# .most_commons(3) : 상위 3개의 원소 출력
from collections import Counter

def solution(orders, course):
    
    answer = []
    for i in course:
        temp = []
        for order in orders:
            # 주문을 하나씩 가져와 가능한 조합을 만든다. (sorted는 3번 예제 순서가 지 맘대로라 추가)
            combi = list(combinations(sorted(order), i)) 
            temp += combi
            # 조합을 하나의 리스트로 만든다. [('X', 'Y'), ('X', 'Z'), ('Y', 'Z')]

        cntDict = Counter(temp) # "조합 : 갯수" 형태로 dic 저장
    
        max = list(cntDict.values()) 
        max.sort() # 주문 갯수들을 리스트로 저장
        
        try:
            if max[-1] == 1:    continue  # 가장 많은 개수가 1이면 무시하고 진행
        except: # 가능한 조합이 없을 경우()
            pass

        for key in cntDict: 
            if cntDict[key] == max[-1]: # 가장 많은 조합은 리스트에 저장
                answer.append("".join(key))
        
    return sorted(answer)